#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/socket.h>
#include <arpa/inet.h>
#include <unistd.h>
#include <pthread.h>
#include <time.h>

#include "gadgets.h"

// List of Sensors
GADGET *gadget_list[MAX_CONNECTIONS];
int gadget_index = 0;

// Print the latest information about Devices and Sensors
void printGadgets()
{
    File* fp = fopen("../");
    puts("-------------------------------------------");

    int x;
    for(x=0; x<gadget_index; x++)
    {
        GADGET *gadget = gadget_list[x];

        char msg[MSG_SIZE];
        sprintf(msg,
             "%d----%s----%s---%u----%s----%d",
             gadget->id, gadget->gadgetType,  gadget->state, (unsigned)time(NULL), gadget->ip, gadget->port);
        puts(msg);        
    }

    puts("-------------------------------------------");
}

// Get the Type and Action from a received commands
void getCommands(char string[], char **type, char **action)
{
    char *tok, *tok2;

    tok = strtok(string, ";");

    if( NULL != tok )
        tok2 = strtok(NULL, ";");

    tok = strtok(tok, ":");

    if( NULL != tok )
        *type = strtok(NULL, ":");

    tok2 = strtok(tok2, ":");

    if( NULL != tok2 )
        *action = strtok(NULL, ":");
}

// Get the Information of a Device or Sensor
void getInfo(char string[], char **gadgetType, char **ip, int *port)
{
    char *tok, *tok2, *a_tok, *c_tok;

    tok = strtok(string, "-");

    *gadgetType = tok;

    if( NULL != tok )
        tok2 = strtok(NULL, "");

    *ip = strtok(tok2, "-");

    if( NULL != ip )
        a_tok = strtok(NULL, "");

    c_tok = strtok(a_tok, "-");

    *port = atoi(c_tok); 
}

int isOn(char *state)
{
    return ( strncmp(state, ON, strlen(ON)) == 0 ) ? 1 : 0;
}

// Gadget's Thread
void *connection(void *skt_desc)
{
    int client_skt_desc = * (int *) skt_desc;

    GADGET *gadget = malloc(sizeof(GADGET));
    
    gadget->id = client_skt_desc;

    int read_size;
    char *command, *action;

    char client_msg[MSG_SIZE], msg[MSG_SIZE], out_msg[MSG_SIZE];

    // Receive Data from Client
    while( (read_size = recv(client_skt_desc, client_msg, MSG_SIZE, 0)) > 0 )
    {
        memset(msg, 0, sizeof(msg));
        printf("\nFROM CLIENT:\n%s\n\n",client_msg);

        getCommands(client_msg, &command, &action);

        // Register Case
        if( strncmp(command, CMD_REGISTER, strlen(CMD_REGISTER)) == 0 )
        {
            char *t_gadgetType, *t_ip;
            
            getInfo(action, &t_gadgetType, &t_ip, &gadget->port);
            
            gadget->gadgetType = (char *)malloc(sizeof(char) * strlen(t_gadgetType));
            memcpy(gadget->gadgetType, t_gadgetType, strlen(t_gadgetType));

            gadget->ip = (char *)malloc(sizeof(char) * strlen(t_ip));
            memcpy(gadget->ip, t_ip, strlen(t_ip));
        
            gadget->state = (char *)malloc(sizeof(char) * 7);
	    if(strncmp(gadget->gadgetType, DOOR, sizeof(DOOR)) == 0)
	    {
		strcpy(gadget->state, CLOSED);
	    } 
	    else if(strncmp(gadget->gadgetType, MOTION, sizeof(MOTION)) == 0)
	    {
		strcpy(gadget->state, FALS);
	    }  
	    else if(strncmp(gadget->gadgetType, KEYCHAIN, sizeof(KEYCHAIN)) == 0)
	    {
		strcpy(gadget->state, FALS);
	    } 
	    else if(strncmp(gadget->gadgetType, SECURITYDEVICE, sizeof(SECURITYDEVICE)) == 0)
	    {
		strcpy(gadget->state, OFF);
	    }

            gadget_list[gadget_index++] = gadget;

            printGadgets();
        }

        // Current State Case
        else if( strncmp( command, CMD_STATE, strlen(CMD_STATE) ) == 0 && 
                 strncmp( gadget->state, action, strlen(action) ) != 0 )
        {
            memset(gadget->state, 0, 7);
            strcpy(gadget->state, action);
            printGadgets();
        }

        memset(out_msg, 0, sizeof(out_msg));
        if( strncmp(gadget->state, TRU, sizeof(TRU)) )
        {
            sprintf(out_msg,
                    "Type:%s;Action:%s",
                    CMD_SWITCH, FALS);
            gadget->state = "False";
        }
	else if( strncmp(gadget->state, FALS, sizeof(FALS)) )
	{
            sprintf(out_msg,
                    "Type:%s;Action:%s",
                    CMD_SWITCH, TRU);
            gadget->state = "True";
        }
	else if( strncmp(gadget->state, OPEN, sizeof(OPEN)) )
	{
            sprintf(out_msg,
                    "Type:%s;Action:%s",
                    CMD_SWITCH, TRU);
            gadget->state = "Close";
        }
	else if( strncmp(gadget->state, CLOSED, sizeof(CLOSED)) )
	{
            sprintf(out_msg,
                    "Type:%s;Action:%s",
                    CMD_SWITCH, OPEN);
            gadget->state = "Open";
        }
	else if( strncmp(gadget->state, ON, sizeof(ON)) )
	{
            sprintf(out_msg,
                    "Type:%s;Action:%s",
                    CMD_SWITCH, OFF);
            gadget->state = "Off";
        }
        else
        {
            sprintf(out_msg,
                    "Type:%s;Action:%s",
                    CMD_SWITCH, ON);
            gadget->state = "On";
        } 
        write(client_skt_desc, out_msg, strlen(out_msg));

        memset(client_msg, 0, sizeof(client_msg));
    }

    if( read_size == 0 ) 
    {
        char msg[100];
        sprintf(msg, 
                "Client %d Unregistered...", 
                client_skt_desc);
        puts(msg);
        fflush(stdout);
    } 
    
    else if ( read_size == -1 ) 
    {
        perror("Data Read Failed");
    }

    return 0;
}

int main( int argc, char *argv[] )
{
    FILE *fp = fopen(argv[1],"r");

    if ( NULL == fp ) 
    {
        perror("Gateway Configuration File Read Failure");
        return 1;
    }

    fseek(fp, 0, SEEK_END);
    long pos = ftell(fp);
    fseek(fp, 0, SEEK_SET);

    char *gateway = malloc(pos * sizeof(char));
    fread(gateway, pos, 1, fp);

    char *token, *ip;
    unsigned short int port;

    token = strtok(gateway, ",");

    ip = token;

    if( NULL != token )
    {
        token = strtok(NULL, ",");
    }

    port = (unsigned short int) atoi(token);

    fclose(fp);

    // Socket Descriptor
    int skt_desc;

    int client_skt_desc;

    size_t size;

    // Socket Addresses Data Type
    struct sockaddr_in skt, client_skt;

    // Socket Creation
    if( (skt_desc = socket(PF_INET, SOCK_STREAM, 0)) < 0 ) 
    {
        perror("Error creating socket");
        return 1;
    }

    puts("Socket Created...");

    // Set host machine address as Any Incoming Address
    skt.sin_addr.s_addr = inet_addr( ip );

    // Set socket address format
    skt.sin_family = AF_INET;

    // Set port number
    skt.sin_port = htons( port );

    // Bind
    if( bind(skt_desc, (struct sockaddr *) &skt, sizeof(skt)) < 0 )
    {
        perror("Bind Failed");
        return 1;
    }

    puts("Bind...");

    // 3 Max Connections to queue for socket
    if( listen(skt_desc, MAX_CONNECTIONS) < 0 )
    {
        perror("Error while listening");
        return 1;
    }
 
    puts("Listening...");

    size = sizeof( struct sockaddr_in );

    pthread_t thread;

    // Complete Connection with a Client
    while( client_skt_desc = accept(skt_desc, (struct sockaddr *) &client_skt, (socklen_t *) &size) )
    {
        if( client_skt_desc < 0 ) 
        {
            perror("Connection Failed");
            return 1;
        }

        puts("Connection Accepted...");

        if( pthread_create( &thread, NULL, connection, (void*) &client_skt_desc) < 0 )
        {
            perror("Thread Creation Failed");
            return 1;
        }
    }

    return 0;         
}
